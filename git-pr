#!/usr/bin/env bash

# shellcheck disable=SC2034
OPTIONS_STUCKLONG=t
# shellcheck disable=SC2034
OPTIONS_KEEPDASHDASH=
# shellcheck disable=SC2034
OPTIONS_SPEC="\
git pr [branch]
--
  Opens the pull request url in your browser. default branch is master
  https://github.com/daodao97/git-pr/
"
SUBDIRECTORY_OK='Yes' . "$(git --exec-path)/git-sh-setup"

# are we in a git repo?
if ! git rev-parse --is-inside-work-tree &>/dev/null; then
  echo "Not a git repository." 1>&2
  exit 1
fi

branch=$(git symbolic-ref -q --short HEAD)
target_branch=${2:-"master"}

if [[ $branch == $target_branch ]]; then
  echo "source branch is equal target barnch" 1>&2
  exit 1
fi

giturl=$(git ls-remote --get-url "origin")

if [[ -z "$giturl" ]]; then
  echo "Git remote is not set for $remote" 1>&2
  exit 1
fi

protocol="https"

function trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    printf '%s' "$var"
}

ssh_config=${ssh_config:-"$HOME/.ssh/config"}
# Resolves an ssh alias defined in ssh_config to it's corresponding hostname
# echos out result, should be used within subshell $( ssh_resolve $host )
# echos out nothing if alias could not be resolved
function ssh_resolve() {
  domain="$1"
  ssh_found=true
  # Filter to only ssh_config lines that start with "Host" or "HostName"
  resolved=$(while read -r ssh_line; do
    # Split each line by spaces, of the form:
    # Host alias [alias...]
    # Host regex
    # HostName resolved.domain.com
    read -r -a ssh_array <<<"${ssh_line}"
    ssh_optcode="$(echo "${ssh_array[0]}" | tr '[:lower:]' '[:upper:]')"
    if [[ $ssh_optcode == HOST ]]; then
      # Host
      ssh_found=false
      # Iterate through aliases looking for a match
      for ssh_index in $(seq 1 $((${#ssh_array[@]} - 1))); do
        ssh_host=${ssh_array[$ssh_index]}
        # shellcheck disable=SC2053
        if [[ $domain == $ssh_host ]]; then
          # Found a match, next HostName entry will be returned while matched
          ssh_found=true
          break
        fi
      done
    elif $ssh_found && [[ $ssh_optcode == HOSTNAME ]]; then
      # HostName, but only if ssh_found is true (the last Host entry matched)
      # Replace all instances of %h with the Host alias
      echo "${ssh_array[1]//%h/$domain}"
    fi
  done < <(grep -iE "^\\s*Host(Name)?\\s+" "$ssh_config"))
  # Take only the last resolved hostname (multiple are overridden)
  tail -1 <<<"$resolved"
}

# From git-fetch(5), native protocols:
# ssh://[user@]host.xz[:port]/path/to/repo.git/
# git://host.xz[:port]/path/to/repo.git/
# http[s]://host.xz[:port]/path/to/repo.git/
# ftp[s]://host.xz[:port]/path/to/repo.git/
# [user@]host.xz:path/to/repo.git/ - scp-like but is an alternative to ssh.
# [user@]hostalias:path/to/repo.git/ - handles host aliases defined in ssh_config(5)

# Determine whether this is a url (https, ssh, git+ssh...) or an scp-style path
if [[ "$giturl" =~ ^[a-z\+]+://.* ]]; then
  # Trim URL scheme and possible username
  gitprotocol=${giturl%%://*}
  uri=${giturl#*://}
  uri=${uri#*@}

  # Split on first '/ to get server name and path
  domain=${uri%%/*}
  urlpath=${uri#*/}

  # Remove port number from non-http/https protocols (ie, ssh)
  if [[ $gitprotocol != 'https' && $gitprotocol != 'http' ]]; then
    domain=${domain%:*}
  fi
else
  # Trim possible username from SSH path
  uri=${giturl##*@}

  # Split on first ':' to get server name and path
  domain=${uri%%:*}
  urlpath=${uri#*:}

  # Resolve sshconfig aliases
  if [[ -e "$ssh_config" ]]; then
    domain_resolv=$(ssh_resolve "$domain")
    if [[ -n "$domain_resolv" ]]; then
      domain="$domain_resolv"
    fi
  fi
fi

# Trim "/" from beginning of URL; "/" and ".git" from end of URL
urlpath=${urlpath#/} urlpath=${urlpath%/} urlpath=${urlpath%.git}

# If the URL is provided as "http", preserve that
if [[ $gitprotocol == 'http' ]]; then
  protocol='http'
fi

# Allow config options to replace the server or the protocol
openurl="$protocol://$domain/$urlpath"

group_name=${urlpath%%/*}
rep_name=${urlpath#*/}

prpath=""

if [[ $domain == 'gitee.com' ]]; then 
  prpath="/pull/new/$group_name:$rep_name...$group_name:$rep_name"
elif [[ $domain == 'github.com' ]]; then
  prpath="/compare/$branch...$target_branch"
elif [[ $domain == 'gitlab.com' ]]; then
  prpath="/-/merge_requests/new?&merge_request[source_branch]=$branch&merge_request[target_branch]=$target_branch"
else
  is_gitlab=$(curl -X HEAD -I $openurl 2>&1 | grep gitlab)
  is_gitlab=$(trim $is_gitlab)
  if [ "$is_gitlab" ]; then
    prpath="/-/merge_requests/new?&merge_request[source_branch]=$branch&merge_request[target_branch]=$target_branch"
  fi
fi

openurl="$openurl$prpath"
open="git web--browse"

# open it in a browser
${BROWSER:-$open} "$openurl"
